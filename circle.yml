version: 2

settings:
  libsodium-version: &LIBSODIUM libsodium-1.0.17
  package-version: &VERSION 1.0.17

workflows:
  version: 2
  build:
    jobs:
      - build-alpine3.7
      - build-centos6
      - build-macos
      - pack:
          requires:
            - build-alpine3.7
            - build-centos6
            - build-macos
      - test-alpine3.7:
          requires:
            - pack
      - test-centos6:
          requires:
            - pack
      - test-centos7:
          requires:
            - pack
      - test-debian8:
          requires:
            - pack
      - test-debian9:
          requires:
            - pack
      - test-fedora27:
          requires:
            - pack
      - test-fedora28:
          requires:
            - pack
      - test-opensuse42.3:
          requires:
            - pack
      - test-ubuntu14.04:
          requires:
            - pack
      - test-ubuntu16.04:
          requires:
            - pack
      - test-ubuntu18.04:
          requires:
            - pack
      - test-macos:
          requires:
            - pack

common_steps:
  environment: &ENVIRONMENT
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    TERM: dumb
  environment: &ENVIRONMENT-INVARIANT
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: 1
    TERM: dumb
  download: &DOWNLOAD
    run:
      name: Download libsodium
      environment:
        LIBSODIUM: *LIBSODIUM
      command: |
          curl -fsLo libsodium.tar.gz https://download.libsodium.org/libsodium/releases/$LIBSODIUM.tar.gz
          tar -xzf libsodium.tar.gz
  build: &BUILD
    run:
      name: Build libsodium
      working_directory: *LIBSODIUM
      command: |
          gcc --version
          ./configure --disable-debug --prefix=/tmp/libsodium-build
          make
          make check
          make install
  finalize-so: &FINALIZE-SO
    run:
      name: Finalizing
      working_directory: *LIBSODIUM
      command: |
          mkdir -p ~/workspace/$CIRCLE_JOB/
          cp /tmp/libsodium-build/lib/libsodium.so ~/workspace/$CIRCLE_JOB/
          strip --strip-all ~/workspace/$CIRCLE_JOB/libsodium.so
  finalize-dylib: &FINALIZE-DYLIB
    run:
      name: Finalizing
      working_directory: *LIBSODIUM
      command: |
          mkdir -p ~/workspace/$CIRCLE_JOB/
          cp /tmp/libsodium-build/lib/libsodium.dylib ~/workspace/$CIRCLE_JOB/
  dotnet-install: &DOTNET-INSTALL
    run:
      name: Install .NET Core SDK
      command: |
        if [ ! -f ~/dotnet-install.sh ]; then curl -fsLo ~/dotnet-install.sh 'https://dot.net/v1/dotnet-install.sh'; fi
        bash ~/dotnet-install.sh --channel 2.1 --version latest --install-dir ~/.dotnet --no-path
        ~/.dotnet/dotnet --info
        echo 'export PATH=~/.dotnet:$PATH' >> $BASH_ENV
  run-tests: &RUN-TESTS
    run:
      name: Run Tests
      environment:
        NUPKGVERSION: *VERSION
      command: |
        dotnet new console --name Tests
        cd Tests
        dotnet add package libsodium --version $NUPKGVERSION --source $(cd "../artifacts"; pwd)
        cp -f ../test.cs Program.cs
        dotnet run

jobs:
  build-alpine3.7:
    docker:
      - image: alpine:3.7
    steps:
      - run:
          name: Install Prerequisites
          command: |
              apk update
              apk add alpine-sdk ca-certificates curl tar
      - *DOWNLOAD
      - *BUILD
      - *FINALIZE-SO
      - persist_to_workspace:
          root: ~/workspace/
          paths:
            - build-alpine3.7

  build-centos6:
    docker:
      - image: centos:6
    steps:
      - run:
          name: Install Prerequisites
          no_output_timeout: 2m
          command: |
            yum install -q -y centos-release-scl ca-certificates curl tar
            yum install -q -y devtoolset-7-gcc*
            echo 'source scl_source enable devtoolset-7' >> $BASH_ENV
      - *DOWNLOAD
      - *BUILD
      - *FINALIZE-SO
      - persist_to_workspace:
          root: ~/workspace/
          paths:
            - build-centos6

  build-debian9:
    docker:
      - image: debian:9
    steps:
      - run:
          name: Install Prerequisites
          command: |
              apt-get -qq update
              apt-get -qq install --yes --no-install-recommends build-essential ca-certificates curl tar
      - *DOWNLOAD
      - *BUILD
      - *FINALIZE-SO
      - persist_to_workspace:
          root: ~/workspace/
          paths:
            - build-debian9

  build-macos:
    macos:
      xcode: "9.2.0"
    steps:
      - *DOWNLOAD
      - *BUILD
      - *FINALIZE-DYLIB
      - persist_to_workspace:
          root: ~/workspace/
          paths:
            - build-macos

  pack:
    docker:
      - image: microsoft/dotnet:2.1-sdk
    environment: *ENVIRONMENT
    steps:
      - run:
          name: Install Prerequisites
          command: |
              apt-get -qq update
              apt-get -qq install --yes --no-install-recommends python3 ca-certificates curl tar unzip make
      - attach_workspace:
          at: ~/workspace/
      - checkout
      - restore_cache:
          keys:
            - *LIBSODIUM
      - run:
          name: Preparing Makefile
          environment:
            NUPKGVERSION: *VERSION
          command: python3 prepare.py $NUPKGVERSION
      - run:
          name: Make NuGet Package
          command: make
      - save_cache:
          key: *LIBSODIUM
          paths:
            - cache
      - persist_to_workspace:
          root: artifacts
          paths:
            - "*.nupkg"
      - store_artifacts:
          path: artifacts
          destination: /

  test-alpine3.7:
    docker:
      - image: microsoft/dotnet:2.1-sdk-alpine3.7
    environment: *ENVIRONMENT-INVARIANT
    steps:
      - checkout
      - attach_workspace:
          at: artifacts
      - *RUN-TESTS

  test-centos6:
    docker:
      - image: centos:6
    environment: *ENVIRONMENT-INVARIANT
    steps:
      - run:
          name: Install Prerequisites
          no_output_timeout: 2m
          command: yum install -q -y curl ca-certificates libunwind
      - *DOTNET-INSTALL
      - checkout
      - attach_workspace:
          at: artifacts
      - *RUN-TESTS
      
  test-centos7:
    docker:
      - image: centos:7
    environment: *ENVIRONMENT
    steps:
      - run:
          name: Install Prerequisites
          no_output_timeout: 2m
          command: yum install -q -y curl ca-certificates libunwind libicu
      - *DOTNET-INSTALL
      - checkout
      - attach_workspace:
          at: artifacts
      - *RUN-TESTS
      
  test-debian8:
    docker:
      - image: debian:8
    environment: *ENVIRONMENT
    steps:
      - run:
          name: Install Prerequisites
          no_output_timeout: 2m
          command: |
            apt-get -qq update
            apt-get -qq install --yes --no-install-recommends curl ca-certificates apt-transport-https gettext libunwind8 libicu52
      - *DOTNET-INSTALL
      - checkout
      - attach_workspace:
          at: artifacts
      - *RUN-TESTS

  test-debian9:
    docker:
      - image: debian:9
    environment: *ENVIRONMENT
    steps:
      - run:
          name: Install Prerequisites
          no_output_timeout: 2m
          command: |
            apt-get -qq update
            apt-get -qq install --yes --no-install-recommends curl ca-certificates apt-transport-https gettext libunwind8
      - *DOTNET-INSTALL
      - checkout
      - attach_workspace:
          at: artifacts
      - *RUN-TESTS

  test-fedora27:
    docker:
      - image: fedora:27
    environment: *ENVIRONMENT
    steps:
      - run:
          name: Install Prerequisites
          no_output_timeout: 2m
          command: dnf install -q -y curl ca-certificates findutils libunwind libicu compat-openssl10
      - *DOTNET-INSTALL
      - checkout
      - attach_workspace:
          at: artifacts
      - *RUN-TESTS

  test-fedora28:
    docker:
      - image: fedora:28
    environment: *ENVIRONMENT
    steps:
      - run:
          name: Install Prerequisites
          no_output_timeout: 2m
          command: dnf install -q -y curl ca-certificates findutils ncurses libunwind libicu compat-openssl10
      - *DOTNET-INSTALL
      - checkout
      - attach_workspace:
          at: artifacts
      - *RUN-TESTS

  test-opensuse42.3:
    docker:
      - image: opensuse:42.3
    environment: *ENVIRONMENT
    steps:
      - run:
          name: Install Prerequisites
          no_output_timeout: 2m
          command: zypper -q install -y --no-recommends curl ca-certificates tar ncurses-utils libunwind libicu
      - *DOTNET-INSTALL
      - checkout
      - attach_workspace:
          at: artifacts
      - *RUN-TESTS

  test-ubuntu14.04:
    docker:
      - image: ubuntu:14.04
    environment: *ENVIRONMENT
    steps:
      - run:
          name: Install Prerequisites
          no_output_timeout: 2m
          command: |
            apt-get -qq update
            apt-get -qq install --yes --no-install-recommends curl ca-certificates apt-transport-https gettext libunwind8 libicu52
      - *DOTNET-INSTALL
      - checkout
      - attach_workspace:
          at: artifacts
      - *RUN-TESTS

  test-ubuntu16.04:
    docker:
      - image: ubuntu:16.04
    environment: *ENVIRONMENT
    steps:
      - run:
          name: Install Prerequisites
          no_output_timeout: 2m
          command: |
            apt-get -qq update
            apt-get -qq install --yes --no-install-recommends curl ca-certificates apt-transport-https gettext libunwind8 libicu55 libcurl3
      - *DOTNET-INSTALL
      - checkout
      - attach_workspace:
          at: artifacts
      - *RUN-TESTS

  test-ubuntu18.04:
    docker:
      - image: ubuntu:18.04
    environment: *ENVIRONMENT
    steps:
      - run:
          name: Install Prerequisites
          no_output_timeout: 2m
          command: |
            apt-get -qq update
            apt-get -qq install --yes --no-install-recommends curl ca-certificates apt-transport-https gettext libunwind8 libicu60 libssl1.0.0
      - *DOTNET-INSTALL
      - checkout
      - attach_workspace:
          at: artifacts
      - *RUN-TESTS

  test-macos:
    macos:
      xcode: "9.2.0"
    environment: *ENVIRONMENT
    steps:
      - *DOTNET-INSTALL
      - checkout
      - attach_workspace:
          at: artifacts
      - *RUN-TESTS
